BUGS or problems:
- componentPlane should not be aplicable to relationasom
- somtune must become more generic
- fix parameter order in lowlevel functions
- batchsom.Rd must be updated
- fix the content of som$errors: make sure the last value is always the final quantisation error
- unify initialization methods

- coding conventions
- C implementation of slow functions:
  - prototype.distances 
- batchsom
  - handling of missing values
  - handling of factors
  - detect oscillatory behavior?
  - save training information 
- hitMap
  - should perhaps return a value
- tests of parameters
- add new quality measures
- smarter som.tune (no repetition of pca init)
- torus topography?
- classif or cluster in results?

+ relational SOM
  - use an object oriented approach where possible
  - initialisation method
  - documentation:
    - write new documentation
    - adapt existing ones
  - extend functions to relation SOM:
    - error.quantisation
    - predict.somnum

+ graphics
  - colormap options in u-matrix and component planes (via plot.somgrid)
  - use nice color map when adapted packages are available (e.g. color brewer)
  - more options for distance.grid (mean, full but also neighbors and partial)
  - 3D umatrix (rgl)
  - add key to plot.somgrid without layout or a similar solution (?)
  - better version of plot.som:
    - use star glyh for low dimension
    - allow parallel coordinates
    - maybe bargraph for factors
  - add options to colorCode
  - color mapping in CIE Lab space (cf colorspace package)
  - variation over the u-matrix principle
  - smooth colormap
  - fix the legend in plot.somtune

+ simple functions to improve
  - summary for som (maybe print)

+ heuristics:
  - annealing based on the map size
  - number of initial radii based on the map size

+ documentation
  - use \dots instead of ...
  - write a vignette or an introduction
  - add original references in graphical methods (in addition to Vesanto's thesis) 
  - componentPlane: add details
  - error.kaskilagus: add details
  - colorCode: add details
  - batchSom: add references (and maybe details)
  - hitMap: check references
  - plot.som: add details after better implementation
  - plot.somgrid: add seealso and maybe references (umatrix ?)
  - somPCAInit: add references
  - grid2lines: add details
  - mapToUnit: will be rewritten when the function is
  - umatrix: add details
  - prototype.distances: add details (?)
  - distance.grid: add details (?)

+ Move to S4 classes?

Done in version 0.2:
- relational SOM (first version with optimal algorithm but no implementation tricks)
- grid2lines is now applicable to any matrix with the correct number of rows 
- generic (S3) functions for batchsom, sominit and protoDist: most of the analysis and display functions can be used form standard SOM and for relational SOM
- the original data are saved in the batchsom result
- introduction to the package via a vignette
- som.tune returns now an object that can be plotted in some simple situations (only one parameter is modified during tuning)


Done in version 0.1:
- plots:
  - generic (plot.somgrid) with key (via layout)
  - prototypes and additional variables (plot.som)
  - U-matrix:
    - custom rendering
    - grid based rendering
  - component planes
  - hit map
- quality measures:
  - first version of Kaski and Lagus measure
- C implementation of slow functions:
  - batchsom and bmu* functions have been implemented in C
- lower level access to batch som
- first version of the documentation
- predict.som (very basic)
- first implementation of coding conventions
- print.som 
- summary.som (quite basic)
- removed somgrid$basesize 
- use somgrid$size where needed
- compute somgrid$dist only if needed (or asked to)
- save some training parameters in the som structure
- batchsom 
  - avoids assignment recomputation when the temperature is changed
